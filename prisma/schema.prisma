 
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
 
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
 
generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
  CLIENT 
  MEMBER
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  firstName          String
  lastName          String
  phone          String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  country        String?
  address         String?
  role          UserRole  @default(USER)
  password      String?
  userId        String? @db.ObjectId
  status Boolean @default(true)
  accounts      Account[]
  sessions      Session[]
  project      Project[]
  invoice      Invoice[]
  isVerfied     Boolean   @default(false)
  token         Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Payment Payment[]

  PortfolioItem PortfolioItem[]
}
 
 
 
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
 
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

 model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String?
  startDated DateTime
  endDate DateTime
  status String
  clientId String  @db.ObjectId
  // client Client @relation(fields: [clientId], references: [id])
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  modules Module[]
  members Member[]
  invoice Invoice[]
  // quotations Quotation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt


 }

 model Module {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  projectId String @db.ObjectId
  project Project @relation(fields: [projectId], references: [id])
  tasks Task[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

 }

  model Task {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  status String
  dueDate DateTime
  moduleId String @db.ObjectId
  module Module @relation(fields: [moduleId], references: [id])
  
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt


 }


   model Invoice {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String @unique
  amount Float
  status String
  dueDate DateTime
  projectId String @db.ObjectId
  project Project @relation(fields: [projectId], references: [id])
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])


  
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt


 }


//    model Quotation {
//   id   String    @id @default(auto()) @map("_id") @db.ObjectId
//   quotationNumber String @unique
//   amount  Float
//   validUnit DateTime
//   projectId String @db.ObjectId
//   project Project @relation(fields: [projectId], references: [id])
//   userId String @db.ObjectId
//   user User @relation(fields: [userId], references: [id])




  
//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt


//  }

  model Payment {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime
  method String
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])


  
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt


 }

 model PortfolioItem {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  imageUrl String?
  projecturl String?
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Member {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String
  projectId String @db.ObjectId
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
